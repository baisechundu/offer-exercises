# 先得到两个链表的长度，让长的链表先走 相差的步数，然后两个链表一起遍历比较
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        a=headA
        b=headB
        lena=0
        lenb=0
        while a:
            a=a.next
            lena+=1
        while b:
            b=b.next
            lenb+=1
        a=headA
        b=headB
        for i in range(abs(lenb-lena)):
            if lenb>lena:
                b=b.next
            else:
                a=a.next;
        while a and b:
            if a is b:
                return a
            else:
                a=a.next
                b=b.next
# 还有种方法，两个链表分别首尾连接，然后遍历比较即可。时间上比上个优一些，空间复杂度高了点。
# 两个链表分别首尾相连，同时遍历这两个新的链表，并比较即可。注意这里的三目运算，不是pre1.next，而是pre1，两个差别很大：
# 前者当不存在公共节点时会陷入死循环，后者在不存在公共节点时会输出公共节点None，就是尾节点。也就是说，后者一定可以结束循环。
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA == None or headB == None:
            return None
        preA = headA
        preB = headB
        while preA != preB:
            preA = preA.next if preA else headB
            preB = preB.next if preB else headA
        return preA
