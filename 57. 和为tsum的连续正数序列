class Solution:
    def FindContinuousSequence(self, tsum):
        if tsum < 3:
            return []
        res = []
        small = 1
        big = 2
        mid = (1 + tsum) / 2
        curSum = small + big
        while small < mid:
            if curSum == tsum:
                res.append(list(range(small, big + 1)))
                small += 2
                big += 1
                curSum -= small * 2 - 3
                curSum += big
            elif curSum < tsum:
                big += 1
                curSum += big
            else:
                curSum -= small
                small += 1
        return res

#自己写这种解法的时候，犯了一个超级大的错误。没有用copy数组复制stack，而是直接将stack连接到结果的后面，这就导致stack的变化间接影响了res数组。
class Solution:
    def FindContinuousSequence(self, tsum):
        small, big, res = 1, 2, []
        stack = [small, big]
        total = 3
        while 2 * big <= tsum + 1:
            copy = [i for i in stack]
            if total == tsum:
                res.append(copy)
                big += 1
                stack.append(big)
                total += big
            elif total < tsum:
                big += 1
                stack.append(big)
                total += big
            else:
                mins = stack.pop(0)
                total -= mins
        return res
