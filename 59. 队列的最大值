#给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。
#例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 
#针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个：
#{[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
class Solution:
    def maxInWindows(self, num, size):
        length = len(num)
        if size > length or length==0 or size < 1:
            return []
        res = []
        for i in range(length-size+1):
            res.append(max(num[i:i+size]))
        return res

#最优解法：一次遍历即可
# -*- coding:utf-8 -*-
class Solution:
    def maxInWindows(self, num, size):
        if not num or size <1:
            return []
        window, res = [], []
        for i, x in enumerate(num):
            if i >= size and window[0] <= i-size: # 滑动窗口的规律，一旦window储存的索引值不符合窗口长度，就删除首项。
                window.pop(0)
            while window and num[window[-1]] <= x: # 在正常window的索引中删除比当前值小的索引，以后的结果只保留window中最大的值
                window.pop()
            window.append(i)
            if i >= size-1:
                res.append(num[window[0]])
        return res
