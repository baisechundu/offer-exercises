# -*- coding:utf-8 -*-
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        res = 0
        if not numbers:
            return res
        if len(numbers)==1:
            return numbers[0]
        record = numbers[0]
        count = 1
        for i in numbers[1:]:
            if count == 0:
                record = i
                count = 1
            elif i == record:
                count += 1
            else:
                count -= 1
        if self.morethanhalf(numbers, record):
            res = record
        return res
    def morethanhalf(self, nums, num):
        if not nums:
            return False
        count = 0
        for i in nums:
            if num == i:
                count += 1
        if count *2 >len(nums):
            return True
        else:
            return False


# 哈希表存储，待优化
# -*- coding:utf-8 -*-
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        dirc,res = {},[]
        for i in numbers:
            if i in dirc:
                dirc[i] += 1
            else:
                dirc[i] = 1
        res = sorted(dirc.items(),key = lambda x:x[1],reverse = True)
        if res[0][1]*2 > len(numbers):
            return res[0][0]
        else:
            return 0
            
            
  #已经优化后的
  # -*- coding:utf-8 -*-
class Solution:
    def MoreThanHalfNum_Solution(self, numbers):
        if len(numbers)==1:
            return numbers[0]
        dirc,res, length= {},[],len(numbers)
        for i in numbers:
            if i in dirc:
                dirc[i] += 1
                if dirc[i] * 2 > length:
                    return i
            else:
                dirc[i] = 1
        return 0
