# 牛客网中没通过，复杂度高，看来只能用归并排序的思想了。
# -*- coding:utf-8 -*-
class Solution:
    def InversePairs(self, data):
        if not data:
            return 0
        count = 0
        for i in range(len(data)-1):
            for j in range(i+1,len(data)):
                if data[i] > data[j]:
                    count += 1
        return count
        
 # 归并排序的想法，中间加上统计的数目即可，仍旧是复杂度过高，只通过了75%的例子。
 # -*- coding:utf-8 -*-
class Solution:
    def InversePairs(self, data):
        if len(data) < 2:
            return 0
        length = len(data)
        copy = [data[i] for i in range(length)]
        return self.statis(data, copy, 0, length-1)%1000000007
        
    def statis(self, nums, copy, start, end):
        if start==end:
            copy[start] = nums[start]
            return 0
        mid = (end-start)//2
        left = self.statis(copy, nums, start, start+mid)
        right = self.statis(copy, nums, start + mid +1, end)
        i, j = start + mid, end
        count, index = 0, end
        while i >= start and j >= start + mid +1:
            if nums[i] > nums[j]:
                copy[index] = nums[i]
                count += j - start - mid
                i -= 1
            else:
                copy[index] = nums[j]
                j -= 1
            index -= 1
        while i >= start:
            copy[index] = nums[i]
            i -= 1
            index -= 1
        while j >= start+mid+1:
            copy[index] = nums[j]
            j -= 1
            index -= 1
        return left + right + count
        
 #这个想法也可以，仍旧是复杂度过高，只通过了50%的例子。
# -*- coding:utf-8 -*-
class Solution:
    def InversePairs(self, data):
        # write code here
        count = 0
        copy = []
        for i in data:
            copy.append(i)
        copy.sort()
        for i in range(len(copy)):
            count += data.index(copy[i])
            data.remove(copy[i])
        return count%1000000007
