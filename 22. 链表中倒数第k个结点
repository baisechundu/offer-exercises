# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 双指针，快的指针先走k-1步，然后两个指针一起走。注意边界条件k的值，有可能比链表长，也有可能不是恰当的数。
class solution:
    def FindKthToTail(self, head, k):
        if head == None or k == 0:
            return None
        p_first = head
        p_behind = head
        for i in range(k-1):
            if p_first.next == None:
                return None
            else:
                p_first = p_first.next
        while p_first.next != None:
            p_first = p_first.next
            p_behind = p_behind.next
        return p_behind
# 利用数组建立新的存储空间，不是较优的做法。
    def  FindKthToTail2(self, head, k):
        res =[]
        while head:
            res.append(head.val)
            head = head.next
        if len(res) < k or k==0:
            return None
        return res[-k]
