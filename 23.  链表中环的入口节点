# 快慢指针，如果快的指针指向None，说明无环，否则就必定会和慢指针相遇。相遇的点很特殊，这个点和初始头结点一块移动，相等时即为入口节点。可用逻辑推理。
class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head and head.next:
            slow = head.next
            fast = head.next.next
        else:
            return None
        while fast:
            if slow != fast:
                slow = slow.next
                if fast.next:
                    fast = fast.next.next
                else:
                    return None
            else:
                node = head
                while node != slow:
                    node = node.next
                    slow = slow.next
                return node
                
 # 思路是一样的：初始化快慢指针指向头结点，快指针一次走两步，慢的一次走一步。相遇时的节点很重要，记做node，则令头结点和node同时走，相遇的节点即为所求。
 # 设链长为 L，环长为K，快慢指针相遇的节点位置距离环入口点长度为 m,则有： L+m = 2*（L-K+m）得到 L-k = k-m。这个等式正好就是代码的最后几步。
class Solution:
    def EntryNodeOfLoop(self, pHead):
        fast, slow = pHead, pHead
        if fast.next:
            slow = slow.next
            fast = fast.next.next
        else:
            return None
        while fast!=slow:
            if fast.next:
                slow = slow.next
                fast = fast.next.next
            else:
                return None
        pre = pHead
        while pre != slow:
            pre = pre.next
            slow = slow.next
        return pre
