#请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（包含0次）。 
#在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与"aa.a"和"ab*a"均不匹配
# 下面是leecode上面的题解，非常简练实用。
# https://leetcode-cn.com/problems/regular-expression-matching/solution/zheng-ze-biao-da-shi-pi-pei-by-leetcode/
# 自底向上的动态规划
class Solution:
    # s, pattern都是字符串
    def match(self, s, pattern):
        dp = [[False]*(len(pattern)+1) for _ in range(len(s)+1)]
        dp[-1][-1] = True
        for i in range(len(s), -1, -1):
            for j in range(len(pattern)-1, -1, -1):
                first_match = i < len(s) and pattern[j] in {s[i],'.'}
                if j < len(pattern)-1 and pattern[j+1]=='*':
                    dp[i][j] = dp[i][j+2] or (first_match and dp[i+1][j]) 
                else:
                    dp[i][j] = first_match and dp[i+1][j+1]
        return dp[0][0]
        
# 自顶向下的动态规划
class Solution:
    # s, pattern都是字符串
    def match(self, text, pattern):
        memo = {}
        def dp(i, j):
            if (i, j) not in memo:
                if j == len(pattern):
                    ans = i == len(text)
                else:
                    first_match = i < len(text) and pattern[j] in {text[i], '.'}
                    if j+1 < len(pattern) and pattern[j+1] == '*':
                        ans = dp(i, j+2) or first_match and dp(i+1, j)
                    else:
                        ans = first_match and dp(i+1, j+1)
                memo[i, j] = ans
            return memo[i, j]
        return dp(0, 0)
#回溯法，递归
class Solution:
    # s, pattern都是字符串
    def match(self, text, pattern):
        if not pattern:
            return not text

        first_match = bool(text) and pattern[0] in {text[0], '.'}

        if len(pattern) >= 2 and pattern[1] == '*':
            return (self.match(text, pattern[2:]) or
                    first_match and self.match(text[1:], pattern))
        else:
            return first_match and self.match(text[1:], pattern[1:])
